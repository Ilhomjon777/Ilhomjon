import imaplib
import email
from email.header import decode_header
from telegram import Bot
import asyncio

# Telegram bot tokeni
bot = Bot(token="7936896770:AAEMsvebKzKyPJ1Z7c1Nw4prsNTYZ6E5Tu0")
chat_id = "283359889"

# Asinxron send_message funksiyasi
async def send_telegram_message(message):
    await bot.send_message(chat_id=chat_id, text=message)

# Mail.ru serverga ulanish
def check_email():
    # Mail.ru pochtasiga ulanish
    mail = imaplib.IMAP4_SSL("imap.mail.ru")
    mail.login("kmzuz@mail.ru", "dfxLyJ4NtARP126DJXaG")
    mail.select("inbox")

    # So'nggi xabarlarni qidirish
    status, messages = mail.search(None, "ALL")
    messages = messages[0].split()

    # So'nggi xabarni olish
    latest_email_id = messages[-1]
    status, msg_data = mail.fetch(latest_email_id, "(RFC822)")

    for response_part in msg_data:
        if isinstance(response_part, tuple):
            msg = email.message_from_bytes(response_part[1])

            # Xabarni dekodlash
            subject, encoding = decode_header(msg["Subject"])[0]
            if isinstance(subject, bytes):
                subject = subject.decode(encoding or "utf-8") if encoding else subject

            from_ = msg.get("From")

            # Xabar matnini olish
            if msg.is_multipart():
                for part in msg.walk():
                    content_type = part.get_content_type()
                    content_disposition = str(part.get("Content-Disposition"))
                    if "attachment" not in content_disposition:
                        body = part.get_payload(decode=True)
                        if body:
                            body = body.decode()  # Ensure body is not None before decoding
                        break
            else:
                body = msg.get_payload(decode=True)
                if body:
                    body = body.decode()

            # Telegramga yuborish
            message = f"Xabar: {subject}\n\nFrom: {from_}\n\nBody: {body if body else 'No body content'}"
            
            # Asinxron metodni chaqirish
            asyncio.create_task(send_telegram_message(message))  # create_task ni ishlatish

    mail.close()
    mail.logout()

# Xabarlarni muntazam tekshirish
async def main():
    while True:
        check_email()
        await asyncio.sleep(60)  # Har 60 soniyada xabarlarni tekshiradi

# Asosiy funksiya va event loopni ishga tushirish
if name == "main":
    asyncio.run(main())
